import PDFDocument from 'pdfkit';
import { storage } from '../storage';
import { type Scan, type Issue } from '@shared/schema';

export class ReportGenerator {
  async generatePDFReport(scanId: number): Promise<Buffer> {
    const scan = await storage.getScan(scanId);
    if (!scan) {
      throw new Error('Scan not found');
    }

    const issues = await storage.getIssuesByScanId(scanId);
    
    const doc = new PDFDocument();
    const chunks: Buffer[] = [];

    doc.on('data', chunk => chunks.push(chunk));
    
    return new Promise((resolve, reject) => {
      doc.on('end', () => {
        resolve(Buffer.concat(chunks));
      });

      doc.on('error', reject);

      // Header
      doc.fontSize(20).text('AccessiScan Accessibility Report', { align: 'center' });
      doc.moveDown();

      // Scan details
      doc.fontSize(14).text(`Website: ${scan.url}`);
      doc.text(`Scan Date: ${scan.createdAt.toLocaleDateString()}`);
      doc.text(`Overall Score: ${scan.overallScore}%`);
      doc.text(`Compliance Level: ${scan.complianceLevel}`);
      doc.moveDown();

      // Summary
      doc.fontSize(16).text('Summary', { underline: true });
      doc.fontSize(12)
        .text(`Total Issues: ${scan.totalIssues}`)
        .text(`Critical Issues: ${scan.criticalIssues}`)
        .text(`Major Issues: ${scan.majorIssues}`)
        .text(`Minor Issues: ${scan.minorIssues}`);
      doc.moveDown();

      // Issues breakdown
      if (issues.length > 0) {
        doc.fontSize(16).text('Detailed Issues', { underline: true });
        
        issues.forEach((issue, index) => {
          if (doc.y > 700) {
            doc.addPage();
          }
          
          doc.fontSize(12);
          doc.text(`${index + 1}. ${issue.title}`, { continued: false });
          doc.fontSize(10);
          doc.text(`Severity: ${issue.severity.toUpperCase()}`, { indent: 20 });
          doc.text(`WCAG Criteria: ${issue.wcagCriteria}`, { indent: 20 });
          doc.text(`Category: ${issue.category}`, { indent: 20 });
          doc.text(`Description: ${issue.description}`, { indent: 20 });
          
          if (issue.element) {
            doc.text(`Element: ${issue.element.substring(0, 100)}...`, { indent: 20 });
          }
          
          if (issue.suggestedFix) {
            doc.text(`Suggested Fix: ${issue.suggestedFix}`, { indent: 20 });
          }
          
          doc.moveDown(0.5);
        });
      }

      // Footer
      doc.fontSize(8).text(`Generated by AccessiScan on ${new Date().toLocaleDateString()}`, 
        50, doc.page.height - 50, { align: 'center' });

      doc.end();
    });
  }
}

export const reportGenerator = new ReportGenerator();
